--------------------------------------------------------------------------------
                                    States
--------------------------------------------------------------------------------
Between philosophers:

JOINING
  At the start, sends out a Join Request to all its neighbors.
  If at any point we have a Join Accept for each of our philosophers (so our list of neighbors that haven't accepted the request is empty), then create a dirty fork for each neighbor and start thinking with all those forks in hand (so that we enter with the lowest priority of our neighbors thereby maintaining an acyclic priority graph).
  Receives:
    Join Accept - Removes the philosopher from their list of neighbors who haven't accepted the request.
    Goodbye Message - Removes the leaving philosopher from their list of neighbors and from the list of neighbors that haven't accepted the requests.
    Store all other requests to be processed later (like when thinking).

THINKING
  Note: A THINKING philosopher should only have dirty forks, if any, at any time.
  Receives:
    Fork Request - Sends the fork to the requester.
    Join Request - Adds the philosopher to its list of neighbors, then sends it a Join Accept (and a fruit basket).
    Goodbye Message - Removes the leaving person from their list of neighbors as well as the corresponding fork if it has it.
    Become Hungry - Switch to the HUNGRY state.
    Leave - Sends a Goodbye Message to all its neighbors then enters LEAVING state.
HUNGRY
  When a philosopher becomes hungry, it has already sent messages to its neighbors requesting any forks it doesn't have.
  Receives:
    Fork Request:
      When a HUNGRY philosopher receives a fork request from another philosopher, we have two cases:
        if the fork is dirty, we send the fork to the requesting philosopher.
        if the fork is clean, we hold onto the request, and it will be processed when the receiving philosopher is thinking.
    Fork:
      When a HUNGRY philosopher receives a fork from another philosopher, it holds onto it. If this is the last fork it needs, it transitions into EATING and sends an Eating message to the controller that told it to become hungry.
    Goodbye Message:
      When a HUNGRY philosopher receives a Goodbye Message from another philosopher, we have two cases:
        If the receiving philosopher has the fork for the edge connecting them, it deletes the fork and no longer needs it to start EATING
        If it doesn't, then it simply knows that it no longer needs that fork to start EATING, and will no longer wait for it.
    Leave:
      When an EATING philosopher receives a Leave message from a controller, it immediately transitions into LEAVING,
      and sends Goodbye Messages to all its neighbors.
  All other messages are saved and will be processed later.
EATING
  When a philosopher becomes hungry, it has already sent messages to its neighbors requesting any forks it doesn't have.
  Receives:
    Fork Request:
      When a HUNGRY philosopher receives a fork request from another philosopher, we have two cases:
        if the fork is dirty, we send the fork to the requesting philosopher.
        if the fork is clean, we hold onto the request, and it will be processed when the receiving philosopher is thinking.
    Fork:
      When a HUNGRY philosopher receives a fork from another philosopher, it holds onto it. If this is the last fork it needs, it transitions into EATING and sends an Eating message to the controller that told it to become hungry.
    Goodbye Message:
      When a HUNGRY philosopher receives a Goodbye Message from another philosopher, we have two cases:
        If the receiving philosopher has the fork for the edge connecting them, it deletes the fork and no longer needs it to start EATING
        If it doesn't, then it simply knows that it no longer needs that fork to start EATING, and will no longer wait for it.
    Leave:
      When an EATING philosopher receives a Leave message from a controller, it immediately transitions into LEAVING,
      and sends Goodbye Messages to all its neighbors.
  All other messages are saved and will be processed later.
LEAVING
  When a philosopher transitions into the leaving state, it has already sent Goodbye Messages to all its
  A philosopher that is LEAVING does not process any messages it receives.
GONE
  The process is dead and no longer receives any messages.

Between philosophers and external controller:

--------------------------------------------------------------------------------
                          Philosopher's Information
--------------------------------------------------------------------------------
Neighbors
Forks
Unprocessed Messages
Neighbors that haven't accepted Join Request (Will only be used in JOINING state)


--------------------------------------------------------------------------------
                                  Messages
--------------------------------------------------------------------------------

Fork Request:
  Information: Requester's name
  Description: The person sending the request is hungry and would like the fork. Eventually the fork will be sent, once the requester has higher priority.
  HUNGRY philosophers can send a Fork Request only if they don't have the relevant fork already.
  THINKING and HUNGRY philosophers can process a Fork Request.

Send a Fork:
  Information: The fork itself
  Description: Sends a fork to a philosopher with higher priority (it is clean upon arrival), allowing that philosopher to eat if it has all the forks.
  HUNGRY and THINKING philosophers can send forks to only to philosopher's who have requested it and only if it is dirty.
  HUNGRY philosophers can receive forks, but only after not having that fork and having sent a request for that fork.

Join Request:
  Information: The name of the new philosopher
  Description: When a philosopher is JOINING it asks everyone if it's ok for them to join.
  JOINING philosophers can send this request.
  THINKING philosophers can process the joining request.


Join Accept:
  Information: A welcome card to the neighborhood (so nothing except confirmation)
  Description: A joining philosopher receiving this from each of its neighbors knows it can start thinking. When a philosopher sends this it means it will thus forth consider the new philosopher as one of its neighbors.
  THINKING philosophers can send these to a joining neighbor in response to a Join Request
  JOINING philosophers can process these

Goodbye Message:
  Information: Requester's name
  Description: The philosopher sending the request has been told by the controller to leave, and is notifying its neighbors of this.
  This can only be sent by THINKING, HUNGRY, or EATING philosophers.
  This can only be processed by philosophers THINKING, HUNGRY, LEAVING, or JOINING.


Controller messages:
  Become hungry:
    A message from a controller to a philosopher to transition from THINKING to HUNGRY.
    These messages are only processed by a philosopher when it is THINKING, at which point it immediately transitions into HUNGRY.
  Eating:
    A message from a philosopher to the controller notifying it that the philosopher has transitioned from HUNGRY to EATING.
  Stop eating:
    A message from a controller to a philosopher to transition from EATING to THINKING.
    These messages are only processed by a philosopher when it is EATING, at which point it immediately transitions into THINKING.
  Leave:
    A message from a controller to a philosopher to transition from its current state to LEAVING.
    These messages can be processed by a philosopher in any state except for JOINING and LEAVING (and, of course, GONE).
  Gone:
    A message from a philosopher to the controller notifying it that the philosopher has transitioned from LEAVING to GONE.


